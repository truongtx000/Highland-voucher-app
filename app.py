import streamlit as st
from itertools import combinations

st.set_page_config(page_title="T√≠nh voucher t·ªëi ∆∞u", layout="centered")

st.title("üßÆ T√≠nh chia nh√≥m m√≥n ƒë·ªÉ d√πng Voucher t·ªëi ∆∞u")

# ========== Nh·∫≠p danh s√°ch m√≥n ==========
st.markdown("### ‚úÖ Nh·∫≠p danh s√°ch m√≥n")
raw_items = st.text_area(
    "M·ªói d√≤ng 1 m√≥n, ƒë·ªãnh d·∫°ng: `t√™n m√≥n,gi√°` (vd: tr√† s·ªØa,45)",
    height=200,
    placeholder="tr√† s·ªØa,45\nb·∫°c x·ªâu,39\ntr√† ƒë√†o,55\nphin ƒëen,49\ncf s·ªØa,29\ntr√† d√¢u,59"
)

# ========== Nh·∫≠p danh s√°ch voucher ==========
st.markdown("### üéüÔ∏è Nh·∫≠p danh s√°ch voucher")
raw_vouchers = st.text_area(
    "M·ªói d√≤ng 1 voucher, ƒë·ªãnh d·∫°ng: `gi√° tr·ªã t·ªëi thi·ªÉu,gi·∫£m gi√°` (vd: 135,30)",
    height=100,
    placeholder="135,30\n169,40"
)
st.markdown("üí° N·∫øu kh√¥ng nh·∫≠p g√¨ th√¨ s·∫Ω d√πng m·∫∑c ƒë·ªãnh: 135k gi·∫£m 30k v√† 169k gi·∫£m 40k.")

# ========== X·ª≠ l√Ω khi b·∫•m n√∫t ==========
if st.button("üöÄ T√≠nh to√°n"):
    # --- Parse m√≥n ---
    items = []
    for line in raw_items.strip().split("\n"):
        try:
            name, price = line.strip().rsplit(",", 1)
            items.append((name.strip(), int(price.strip())))
        except:
            st.error(f"‚ùå D√≤ng m√≥n kh√¥ng h·ª£p l·ªá: `{line}`. ƒê·ªãnh d·∫°ng ph·∫£i l√† `t√™n m√≥n,gi√°`.")
            st.stop()

    if len(items) < 2:
        st.warning("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 2 m√≥n ƒë·ªÉ chia nh√≥m.")
        st.stop()

    # --- Parse voucher ---
    voucher_list = []
    if raw_vouchers.strip():
        for line in raw_vouchers.strip().split("\n"):
            try:
                min_value, discount = map(lambda x: int(x.strip()), line.strip().split(","))
                voucher_list.append((min_value, discount))
            except:
                st.error(f"‚ùå D√≤ng voucher kh√¥ng h·ª£p l·ªá: `{line}`. ƒê·ªãnh d·∫°ng ph·∫£i l√† `gi√° tr·ªã t·ªëi thi·ªÉu,gi·∫£m gi√°`.")
                st.stop()
    else:
        voucher_list = [(135, 30), (169, 40)]  # M·∫∑c ƒë·ªãnh

    # === T√¨m c√°ch chia t·ªëi ∆∞u ===
    n = len(items)
    best_result = None  # (total_cost, total_discount, used_items, (group1, group2, used_vouchers))

    for i in range(1, n):
        for group1_indices in combinations(range(n), i):
            group1 = [items[j] for j in group1_indices]
            group2 = [items[j] for j in range(n) if j not in group1_indices]

            total1 = sum(p for _, p in group1)
            total2 = sum(p for _, p in group2)

            # X√©t m·ªçi voucher c√≥ th·ªÉ √°p d·ª•ng cho t·ª´ng nh√≥m
            applicable1 = [v for v in voucher_list if total1 >= v[0]]
            applicable2 = [v for v in voucher_list if total2 >= v[0]]

            # Duy·ªát c√°c TH: kh√¥ng d√πng, 1 nh√≥m d√πng, 2 nh√≥m d√πng
            scenarios = []

            # Kh√¥ng d√πng voucher
            scenarios.append((total1 + total2, 0, len(group1) + len(group2), group1, group2, [], []))

            # D√πng cho group1
            for v in applicable1:
                scenarios.append((
                    total1 + total2 - v[1], v[1], len(group1) + len(group2), group1, group2, [v], []
                ))

            # D√πng cho group2
            for v in applicable2:
                scenarios.append((
                    total1 + total2 - v[1], v[1], len(group1) + len(group2), group1, group2, [], [v]
                ))

            # D√πng cho c·∫£ 2 nh√≥m
            for v1 in applicable1:
                for v2 in applicable2:
                    if v1 == v2 and voucher_list.count(v1) < 2:
                        continue  # Kh√¥ng d√πng 2 l·∫ßn 1 voucher n·∫øu ch·ªâ c√≥ 1
                    scenarios.append((
                        total1 + total2 - v1[1] - v2[1],
                        v1[1] + v2[1],
                        len(group1) + len(group2),
                        group1, group2,
                        [v1], [v2]
                    ))

            # Ch·ªçn best
            for sc in scenarios:
                if (best_result is None or
                    sc[1] > best_result[1] or
                    (sc[1] == best_result[1] and sc[0] < best_result[0])):
                    best_result = sc

    # ========== Hi·ªÉn th·ªã k·∫øt qu·∫£ ==========
    def show_group(title, group, vouchers):
        if not group:
            return
        if vouchers:
            vstr = " + ".join([f"{v[0]}küéüÔ∏è-{v[1]}k" for v in vouchers])
            st.markdown(f"**{title}** üéÅ *({vstr})*")
        else:
            st.markdown(f"**{title}**")

        for name, price in group:
            st.markdown(f"- {name} ({price}k)")
        st.markdown(f"**T·ªïng: {sum(p for _, p in group)}k**")

    if best_result:
        cost, discount, _, g1, g2, v1, v2 = best_result
        st.subheader("üìã K·∫æT QU·∫¢ T·ªêI ∆ØU")
        show_group("Nh√≥m 1", g1, v1)
        show_group("Nh√≥m 2", g2, v2)
        st.success(f"‚úÖ T·ªïng chi ph√≠ sau gi·∫£m gi√°: **{cost}k** (gi·∫£m ƒë∆∞·ª£c {discount}k)")
    else:
        st.warning("‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c c√°ch chia h·ª£p l√Ω.")
